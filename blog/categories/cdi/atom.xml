<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CDI | Steve Hostettler]]></title>
  <link href="http://hostettler.github.io/blog/categories/cdi/atom.xml" rel="self"/>
  <link href="http://hostettler.github.io/"/>
  <updated>2014-05-13T22:15:45+02:00</updated>
  <id>http://hostettler.github.io/</id>
  <author>
    <name><![CDATA[Steve Hostettler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Context Dependency Injection and the Rich Object Model]]></title>
    <link href="http://hostettler.github.io/blog/2012/12/05/servicelocator/"/>
    <updated>2012-12-05T06:59:00+01:00</updated>
    <id>http://hostettler.github.io/blog/2012/12/05/servicelocator</id>
    <content type="html"><![CDATA[<p>[Rich object model] vs [anemic object model] is long running debate. While the latter encourages to use simple and stupid objects with little or no business in them, the rich object model advocates for a clean object design with inheritance, polymorphism and so on.
The anemic object model is very popular among JEE partitioners because, in the past, the specification did not provide any mean to invoke services in business objects. Therefore, the anemic pattern uses so called "managers" that maintain references to other "managers". A direct benefit is the clear separation of concerns between the different kind of objects. Basically, it splits processing and data. As this is anti-object oriented, the abstract design of such system is often very different from the actual implementation.</p>

<h2>The portfolio example</h2>

<p>As example, let us take a portfolio that contains a set of financial position. A financial position can be either a set of stock, or an amount in a given currency. To evaluate the actual portfolio value, we go through the positions and for each of them we ask the current quote for stock to the service <code>QuoteService</code> or the current value of a given currency to the <code>CurrencyService</code>.
The next figure presents the "ideal" design.</p>

<p><span class='caption-wrapper center'><img class='caption' src='/figures/portfolio-business.png' width='' height='' alt='An object oriented class diagram of the Portfolio management component.' title='An object oriented class diagram of the Portfolio management component.'><span class='caption-text'>An object oriented class diagram of the Portfolio management component.</span></span></p>

<p>To achieve this, one need to access services from within business objects. Since EJB 3.1,  Context and Dependency Injection (CDI) provides such a mechanism via the <code>@Inject</code> annotation. The only requirement is that the object that requires the service as well as the service to inject are so called "managed beans". The trick is that not all objects are meant to be managed. Furthermore, having managed lists of object is very tricky to say the least. Fortunately, the EJB 3.1 and more specifically the CDI 1.0 specification provide a way to solve this.
In CDI, the main component is the bean manager. This manager keeps track of the beans to inject via @Inject and other means. Instead of relying on annotations to provide injection, it is possible to use the good old Service Locator pattern. CDI 1.0 exposes the bean manager on JNDI with the name <code>java:comp/BeanManager</code>.</p>

<p>```java
public class ServiceLocator {</p>

<pre><code>@SuppressWarnings("unchecked")
public static &lt;T&gt; T getInstance(final Class&lt;T&gt; type) {
    T result = null;
    try {

        //Access to the current context.
        InitialContext ctx = new InitialContext();
        //Resolve the bean manager
        BeanManager manager = (BeanManager) ctx.lookup("java:comp/BeanManager");
        //Retrieve all beans of that type
        Set&lt;Bean&lt;?&gt;&gt; beans = manager.getBeans(type);
        Bean&lt;T&gt; bean = (Bean&lt;T&gt;) manager.resolve(beans);
        if (bean != null) {
            CreationalContext&lt;T&gt; context = manager
                    .createCreationalContext(bean);
            if (context != null) {
                result = (T) manager.getReference(bean, type, context);
            }
        }
    } catch (NamingException e) {
        throw new RuntimeException(e);
    }
    return result;
}
</code></pre>

<p>}
```</p>

<p>The client code is very simple. It consists in calling the <code>ServiceLocator</code>with the desired interface.
For the sake of clarity, I did not show the ServiceLocator that takes a qualifier in addition to the interface. To add this feature, look at the <code>getBeans(Type beanType, Annotation... qualifiers)</code> method.</p>

<p>```java</p>

<p>public class StockPos {</p>

<pre><code>private Long qty;
private String stockId;

Double evaluate() {
    StockQuoteService sqs = ServiceLocator.getInstance(StockQuoteService.class);
    return qty * sqs.getQuoteValue(stockId);
}
</code></pre>

<p>}
```</p>

<p>Similarly, here is the code of the <code>CurrencyPos</code> object.</p>

<p>```java</p>

<p>public class CurrencyPos {</p>

<pre><code>private Double amount;
private String currencyId;

Double evaluate() {
    CurrencyQuoteService sqs = ServiceLocator.getInstance(CurrencyQuoteService.class);
    return amount * sqs.getQuoteValue(stockId);
}
</code></pre>

<p>}
```</p>

<h2>Some thoughts on the Demeter law</h2>

<p>Let me be clear, I do <strong>not</strong> recommend this approach everywhere. It is very important to not mix the objects responsabilities. Furthermore,
in order to respect the Demeter law, a business must <strong>not</strong> directly call something outside of the current component. Calls to other components are always to be done through so-called consumers to have clear components boundaries.
For instance, putting to much intelligence in JPA entities that can be detached and serialized may cause problems on the client side.</p>

<h2>Conclusion</h2>

<p>In this post, I showed a solution to consume services that are exposed via the CDI BeanManager. These services can be pure POJOs or EJBs.
Nevertheless, this approach must be used with great care as it can blur the components boundaries and responsabilities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-Tenancy with EJB 3.1 and JPA 2.0]]></title>
    <link href="http://hostettler.github.io/blog/2012/11/20/multi-tenancy/"/>
    <updated>2012-11-20T05:18:00+01:00</updated>
    <id>http://hostettler.github.io/blog/2012/11/20/multi-tenancy</id>
    <content type="html"><![CDATA[<p>Multi-tenancy is a recurrent non functional requirement. Indeed, many important IT-systems are meant to be shared among multiple tenants. The data are often distributed over several databases or schemas. This, for different reasons:</p>

<ul>
<li>Security: The data belong to different customers and some level of isolation is required;</li>
<li>Performances: Distributing the data over multiple systems may help to master performance issues;</li>
<li>Legacy: Sometimes, old and new systems must cohabit for a (long) time;</li>
<li>Maintenability: A database or a schema can be updated without putting the rest of the application at risk.</li>
</ul>


<p>Although data are distributed, the application code should remain tenant agnostic. Furthermore, choosing between the different tenants is often made at runtime based on credentials (e.g. user Joe has access to customer AAAA while user Jane sees data of customer BBB). <a href="/https://blogs.oracle.com/arungupta/entry/java_ee_7_key_features">Java EE 7 will address this problem and much more</a>, but in the mean time here is the way that I use to address this problematic using EJB 3.1 and JPA 2.0</p>

<h2>Overall architecture</h2>

<p>First, let me start with the overall architecture as described below.</p>

<p><span class='caption-wrapper center'><img class='caption' src='/figures/multi-tenancy-architecture.png' width='' height='' alt='Multi-tenancy architecture with serveral datasources' title='Multi-tenancy architecture with serveral datasources'><span class='caption-text'>Multi-tenancy architecture with serveral datasources</span></span></p>

<p>In the above figure, the database is organized in schemas, with one application server datasource (DS) per schema and one persistence unit (PU) per datasource.
It is also possible to use only one datasoure and to discriminate between schemas by setting the <code>&lt;property name="openjpa.jdbc.Schema" value="TenantX" /&gt;</code> property for each persistence unit (PU). This sets the default schema for the PU.
Here is a <code>persistence.xml</code> file that provides one persistence unit per tenant.</p>

<p>The following code has been tested for Open-JPA but there is nothing specific to this implementation outside of the <code>&lt;provider&gt;</code>tag in the <code>persistence.xml</code>file.</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;persistence version="2.0"</p>

<pre><code>xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"&gt;

&lt;persistence-unit name="Tenant1" transaction-type="JTA"&gt;
    &lt;provider&gt;
        org.apache.openjpa.persistence.PersistenceProviderImpl
    &lt;/provider&gt;
    &lt;jta-data-source&gt;jdbc/Tenant1_DS&lt;/jta-data-source&gt;
    &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;
&lt;/persistence-unit&gt;


&lt;persistence-unit name="Tenant2" transaction-type="JTA"&gt;
    &lt;provider&gt;
        org.apache.openjpa.persistence.PersistenceProviderImpl
    &lt;/provider&gt;
    &lt;jta-data-source&gt;jdbc/Tenant2_DS&lt;/jta-data-source&gt;
    &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;
&lt;/persistence-unit&gt;
</code></pre>

<p></persistence>
```</p>

<p>The basic idea is that, instead of using <code>@PersistenceContext</code>, we inject our "own" multi tenant entity manager wraper.
Then, at runtime, the multi-tenant entity manager loads the persistence context that corresponds to the current user context from JNDI.
Please note that this only works for JTA-based persistence-units. Otherwise, the persistence context is not container-basd and therefore not exposed to JNDI. Moreover, without JTA, we loose container based transaction demarcation.</p>

<p>Let us first start with the client code. In other words, how to use the Multi-Tenant Entity manager.</p>

<h2>Client Code</h2>

<p>Here is the client code. In order to preserve thread-safety and transactionality, Data access objects are EJBs (<code>@Stateless</code>, <code>@Stateful</code>, <code>@Singleton</code>). The presented solution uses an entity manager that is wrapped and then injected using <code>@Inject</code> or <code>@EJB</code>.  Thread-safety, transactionnality and performances are guaranted by the <code>EJB 3.1</code> and <code>JPA 2.0</code> specification as explained in the section <code>Thread-safety and Transactionality</code>. As shown below, the <code>MultiTenancyWrapper</code> delegates to a real entity manager and implements the <code>EntityManager</code> interface. Therefore, its use is very similar to a normal <code>EntityManager</code> injected via <code>@PersistenceContext</code>.</p>

<p>```java
@Stateless
public class MyEJB implements MyEJBLocal {</p>

<pre><code>@Inject
private MultiTenancyWrapper emWrapper;

@TransactionAttribute(TransactionAttributeType.REQUIRED)
public void doSomething() {
    emWrapper.findAll(...);
}
</code></pre>

<p>}
```</p>

<h2>The Multi-Tenant EntityManager EJB</h2>

<p>The <code>MultiTenanEntityManagertWrapper</code> simply wraps the entity manager that corresponds to the current user context. The trick is to configure it as an EJB in order to get the xml configuration feature via <code>ejb-jar.xml</code>. Another alternative would be to use the <code>@PersistenceContexts</code> and <code>@PersistenceContext</code> annotations. The main drawback being that, for each new tenant, not only the <code>persistence.xml</code> and <code>ejb-jar.xml</code> must be changed but also the <code>Java</code> code.</p>

<p>The JNDI context that is linked to the current request is injected in the <code>MultiTenantEntityManager</code> using the <code>@Resource</code>annotation.
As there is no creation of a new <code>InitialContext</code> the overhead is not significant. Actually, the <code>@PersistentContext</code> annotation does the exact same thing except that it is not specific to the user context. The <code>MultiTenanEntityManagertWrapper</code> implements the delegate pattern. This allows to use it (almost) transparently in client code.
The main difference being the use of <code>@Inject</code> or <code>@EJB</code> over <code>@PersistenceContext</code> in the client code.</p>

<p>Using the session context that is specific to the caller bean (and thus the caller request/session) enables transparent support for thread-safety, security and transactionality.</p>

<p>```java
package ejb;</p>

<p>import javax.persistence.EntityManager;</p>

<p>public interface MultiTenanEntityManagertWrapper extends EntityManager {</p>

<p>}
```</p>

<p>The method <code>getMultiTenantEntityManager</code> of the <code>MultiTenanEntityManagertWrapperImpl</code> extracts the <code>EntityManager</code> that corresponds to the current request from JNDI (we will see later how it has been put there). To that end, the method <code>getMultiTenantEntityManager</code>first extracts the prinipal from the current EJB context (<code>SessionContext</code>). After what, the tenant that corresponds to the current user is used to obtain the JNDI name of the corresponding entity manager. <code>MultiTenanEntityManagertWrapperImpl</code> simple delegates every call to the this Request specific <code>EntityManager</code>.</p>

<p>```java</p>

<p>@Stateless
public class MultiTenanEntityManagertWrapperImpl implements MultiTenanEntityManagertWrapper {</p>

<pre><code>private static final String JNDI_ENV = "java:comp/env/persistence/";

@Resource
SessionContext context;


private EntityManager getMultiTenantEntityManager() {
    //Extract the name of the current user.
    Principal p = context.getCallerPrincipal();

    //Lookup the tenant name for the current user
    //This is application specific
    Users u = Users.getUser(p.getName());

    //Produces either TENANT1 or TENANT2        
    String tenantName = u.getSite().toString();

    String jndiName = new StringBuffer(JNDI_ENV).append(tenantName).toString();
    //Lookup the entity manager
    EntityManager manager = (EntityManager) context.lookup(jndiName);

    if (manager == null) {
        throw new RuntimeException("Tenant unknown");
    }
    return manager;
}


//The delegates
@Override
public void persist(Object entity) {
    getMultiTenantEntityManager().persist(entity);
}


@Override
public &lt;T&gt; T merge(T entity) {
    return getMultiTenantEntityManager().merge(entity);
}


@Override
public void remove(Object entity) {
    getMultiTenantEntityManager().remove(entity);
}

    ...
</code></pre>

<p>}
```</p>

<p>Now let us see how to put the entity manager references in JNDI.
In order to avoid a lot of annotations (one per tenant) and therefore to be able to handle a huge number of tenans, I propose to use the <code>ejb-jar.xml</code> file to configure the EJB intead of the <code>PersistenceContext</code> annotation. The <code>MultiTenantEntityWrapper</code>EJB is configured as a stateless EJB. Ther persistence contexts are simply exposed to JNDI with the following pattern: <code>java:comp/env/persistence/TENANTX</code>. For more information please look at the EJB 3.1 specification chapter 16.11.1.</p>

<p><code>&lt;persistence-unit-name&gt;Tenant1&lt;/persistence-unit-name&gt;</code> is the name of the PU as defined in the <code>persistence.xml</code> file. <code>&lt;persistence-context-ref-name&gt;persistence/TENANT1&lt;/persistence-context-ref-name&gt;</code>defines the name of the entity manager that is exposed via JNDI.</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;ejb-jar xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:ejb="http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/ejb-jar_3_1.xsd" version="3.1"></p>

<pre><code>&lt;enterprise-beans&gt;
    &lt;session&gt;
        &lt;ejb-name&gt;MultiTenantEntityWrapper&lt;/ejb-name&gt;   
        &lt;ejb-class&gt;ejb.MultiTenantWrapperImpl&lt;/ejb-class&gt;
        &lt;session-type&gt;Stateless&lt;/session-type&gt;

        &lt;!-- Persistece contexts --&gt;
        &lt;persistence-context-ref&gt;
            &lt;description&gt;Tenant 1&lt;/description&gt;             
            &lt;persistence-context-ref-name&gt;persistence/TENANT1&lt;/persistence-context-ref-name&gt;        
            &lt;persistence-unit-name&gt;Tenant1&lt;/persistence-unit-name&gt;
            &lt;persistence-context-type&gt;Transaction&lt;/persistence-context-type&gt;
        &lt;/persistence-context-ref&gt;

        &lt;persistence-context-ref&gt;
            &lt;description&gt;Tenant 2&lt;/description&gt;             
            &lt;persistence-context-ref-name&gt;persistence/TENANT2&lt;/persistence-context-ref-name&gt;        
            &lt;persistence-unit-name&gt;Tenant2&lt;/persistence-unit-name&gt;
            &lt;persistence-context-type&gt;Transaction&lt;/persistence-context-type&gt;                
        &lt;/persistence-context-ref&gt;

    &lt;/session&gt;
&lt;/enterprise-beans&gt;
</code></pre>

<p>&lt;/ejb-jar>
```</p>

<h2>Thread-safety and Transactionality</h2>

<p>As this is compliant with both the EJB 3.1 and JPA 2.0 specification, thread-safety and transactionnaly are guaranteed by the container. For more details please look at the EJB 3.1 specification
at chapters 16.10, 16.11 and the JPA 2.0 specification at chapter 7.6. Of course, the wrapper has to be an EJB in order to have access to the current JNDI context without having to create it.
Furthermore, because the <code>EntityManager</code>is not <code>per se</code> thread-safe (JPA 2.0, chapter 7.2), the serialization of the invokations that is provided by the container for EJBs is essential the thread-safety aspect (EJB 3.1, chapter 4.10.13).</p>

<h2>Conclusion</h2>

<p>In this post, I showed how to leverage EJB 3.1 and JPA 2.0 standard features to provide multi-tenancy. The presented approach is thead-safe, it preserves transactionaly and does not induce
a significant overhead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to simulate CDI scopes and injection in Java SE.]]></title>
    <link href="http://hostettler.github.io/blog/2012/04/02/how-to-test-a-jsf-named-bean/"/>
    <updated>2012-04-02T21:37:00+02:00</updated>
    <id>http://hostettler.github.io/blog/2012/04/02/how-to-test-a-jsf-named-bean</id>
    <content type="html"><![CDATA[<p>Unit testing managed beans is difficult outside of a container. Managed beans heavily rely on the notions of scopes and injection that do not exist outside of a container. In JEE6, both are handled by CDI (Context Dependency Injection).
<a href="http://www.jboss.org/arquillian.html">Arquillian</a> is a powerful solution to this problem. Nevertheless, sometimes for technical or even for political reasons, it is not possible to add a new component to the existing stack.
While searching for alternatives, I came across several interesting articles (<a href="http://www.jtips.info/index.php?title=WeldSE/Scopes">here</a>, <a href="http://objectopia.com/2011/05/29/weld-junit-4-runner/">here</a> and <a href="http://danhaywood.com/2010/08/12/simulating-cdis-session-and-request-scope-in-a-j2se-app/">here</a>) that explain how to simulate such features in unit tests.</p>

<p>This post aims at consolidating these articles for Weld 1.1.5 and JUnit 4.5.
The following example is part of a Demo project that I use to teach the JEE stack that is located on Google Code Hosting and <a href="http://code.google.com/p/jee6-demo/">JEE-6-Demo</a></p>

<p>The following snippet presents a unit test of a managed bean. The bean to test (and all its dependencies) is injected in the test. As you can see the test is simple and straightforward.
The injected scopes (Conversation in this case) can be used during the test to setup a particular case.</p>

<p>```java Unit testing of the ManageStudentRegistration managed bean
@RunWith(WeldJUnit4Runner.class)
public class ManageStudentRegistrationTest {</p>

<pre><code>/** Service injected by the Weld container. */
@Inject
private ManageStudentRegistration mManageStudentRegistration;

/** A conversation for the test. */
@Inject
private Conversation mConversation;

@Test
public void testPieChartCreation() {
    PieChartModel model = this.mManageStudentRegistration.getPieModel();
    Assert.assertNotNull(model);
    Assert.assertEquals(4, model.getData().size());
}

@Test
public void toRegistrationTest() {
    this.mConversation.begin("ConversationId");
    Assert.assertEquals("register", mManageStudentRegistration.toRegistration());
}
</code></pre>

<p>}
```</p>

<p>The fist step is to enable CDI injection in unit tests. To that end, we extends the <code>BlockJUnit4ClassRunner</code> that is responsible for creating a Test case.
The constructor simply initializes the Weld container. Finally, we override the
test creation. Instead of directly invoking the constructor of the test class, we ask Weld to instantiate it (line 25). This will inject all dependencies into the test object. In our case, it will create  the manager bean and its dependencies.</p>

<p>```java
public class WeldJUnit4Runner extends BlockJUnit4ClassRunner {</p>

<pre><code>/** The test class to run. */
private final Class&lt;?&gt; mKlass;
/** Weld infrastructure. */
private final Weld weld;
/** The container itself. */
private final WeldContainer container;

/**
 * Runs the class passed as a parameter within the container.
 * @param klass to run
 * @throws InitializationError if anything goes wrong.
 */
public WeldJUnit4Runner(final Class&lt;Object&gt; klass) throws InitializationError {
    super(klass);
    this.mKlass = klass;
    this.weld = new Weld();
    this.container = weld.initialize();
}


@Override
protected Object createTest() throws Exception {
    final Object test = container.instance().select(mKlass).get();
    return test;
}
</code></pre>

<p>}
```</p>

<p>Remember to declare a <code>META-INF/beans.xml</code> file in the test resources in order to provide
mock implementations. In this case, we enable the alternative <code>StudentServiceMockImpl</code> that is used by the managed bean that is under test.</p>

<p>```xml META-INF/beans.xml file used for the unit tests.
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;beans xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</p>

<pre><code>xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd"&gt;
&lt;alternatives&gt;
    &lt;class&gt;ch.demo.business.service.mock.StudentServiceMockImpl&lt;/class&gt;
&lt;/alternatives&gt;
</code></pre>

<p></beans>
```</p>

<p>Until there, the dependency injection does not manage the scopes that may be used in managed bean. To that end, we must add an <a href="http://docs.jboss.org/weld/reference/latest/en-US/html/extend.html">extension</a> to Weld. Extensions are powerful mechanisms to tweak the container behavior. In this case, we want to add the missing scopes. This is done in the following snippet. It listens to the <code>AfterDeploymentValidation</code> event that occurs after the configuration as been validated but before context creation. Methods <code>afterDeployment</code> creates a map for each scope and associates it.
```java
package org.jboss.weld.manager; // required for visibility to BeanManagerImpl#getContexts()
...
/<em>*
 * Taken from http://www.jtips.info/index.php?title=WeldSE/Scopes,
 * it simulates request and session scopes outside of an application server.
 </em>/
public class WeldServletScopesSupportForSe implements Extension {</p>

<pre><code>/** {@inheritDoc} */
public void afterDeployment(@Observes final AfterDeploymentValidation event, 
                final BeanManager beanManager) {

    Map&lt;String, Object&gt; sessionMap = new HashMap&lt;String, Object&gt;();
    activateContext(beanManager, SessionScoped.class, sessionMap);

    Map&lt;String, Object&gt; requestMap = new HashMap&lt;String, Object&gt;();
    activateContext(beanManager, RequestScoped.class, requestMap);

    activateContext(beanManager, ConversationScoped.class, 
            new MutableBoundRequest(requestMap, sessionMap));
}

/**
 * Activates a context for a given manager.
 * @param beanManager in which the context is activated
 * @param cls the class that represents the scope
 * @param storage in which to put the scoped values
 * @param &lt;S&gt; the type of the storage
 */
private &lt;S&gt; void activateContext(final BeanManager beanManager,
            final Class&lt;? extends Annotation&gt; cls, final S storage) {
    BeanManagerImpl beanManagerImpl = (BeanManagerImpl) beanManager;
    @SuppressWarnings("unchecked")
    AbstractBoundContext&lt;S&gt; context = 
        (AbstractBoundContext&lt;S&gt;) beanManagerImpl.getContexts().get(cls).get(0);

    context.associate(storage);
    context.activate();
}
</code></pre>

<p>}
```</p>

<p>To register and activate a CDI extension, a file that contains the extension class name must be present and named <code>META-INF/services/javax.enterprise.inject.spi.Extension</code>.
<code>java META-INF/services/javax.enterprise.inject.spi.Extension
org.jboss.weld.manager.WeldServletScopesSupportForSe
</code></p>

<h2>Conclusion</h2>

<p>Testing the JEE6 outside of the container is easier and easier. Long gone are the days of the EJB 2.1 untestability.
Nevertheless, not everything is simple and we still have to do some tricks to get it working.</p>
]]></content>
  </entry>
  
</feed>
